
initial server side render?


SWITCH HOSTING TO AZURE 

  sql?
  email service?



AUTHENTICATION

  always check if current password in db matches jwt checksum to invalidate old password access tokens
  add new table for keeping track of refresh tokens (id, token, expires)
  new auth jwt {
    user.Id
    user.Role
    user.PasswordCheckSum
    expireDate (7 days)
  }


GOOGLE SIGN IN

  query google server for auth code from front end
  send auth code back to api
  api uses auth code to get access token from google server
  api uses access token to get email 
  api checks if email is registered in our system
    if not we create a user in our db with email and public info (name)
      store google access token in db, also set account type to 1 (google oauth)

    if it is, we return success and update the users access token in the db


  add generic website signup as authorization type 0
  add google oauth sign in as authorization type 1
  add facebook oauth sign in as authorization type 2



  STRUCTURE REDO

    src (boot highest order components)

    - index.js
    - app.js

    store (stores for state (mobX??))

      - userStore
      - productStore

    container (navigation defined, main pages)

      - login
      - register
      - products

    components (smaller re-usable components that containers render props with)

      - inputField
      - errorDisplay
      - product
      - loadingButton	
      - formBox
      
    services (api calls)
      
      - userService
      - productService

    constants (url's and config stuff)

      - apiConstants
    
    Helpers (helper function classes)

      - ErrorHelper
